import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import { useAuth } from '../context/AuthContext';
import { FaUser, FaEnvelope, FaPhone, FaCalendarAlt, FaEdit, FaTrash, FaFilePdf, FaFileExcel, FaPrint, FaChartBar } from 'react-icons/fa';
import '../styles/UserManagement.css';

const UserManagement = () => {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [showReport, setShowReport] = useState(false);
  const [reportType, setReportType] = useState('basic');
  const reportRef = useRef(null);
  const [stats, setStats] = useState({
    totalUsers: 0,
    activeUsers: 0,
    newUsersThisMonth: 0
  });
  const { token } = useAuth();

    
  useEffect(() => {
    const fetchUsers = async () => {
      try {
        setLoading(true);
        const response = await axios.get('/api/users', {
          headers: { Authorization: `Bearer ${token}` }
        });
        
        setUsers(response.data);
        
        // Calculate stats
        const now = new Date();
        const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);
        
        const newUsersThisMonth = response.data.filter(user => {
          const createdAt = new Date(user.createdAt);
          return createdAt >= thisMonth;
        }).length;
        
        setStats({
          totalUsers: response.data.length,
          activeUsers: response.data.length, // Assuming all users are active for now
          newUsersThisMonth
        });
        
        setLoading(false);
      } catch (error) {
        console.error('Error fetching users:', error);
        setError('Failed to fetch users. Please try again later.');
        setLoading(false);
      }
    };

    fetchUsers();
  }, [token]);

  const formatDate = (dateString) => {
    const options = { year: 'numeric', month: 'short', day: 'numeric' };
    return new Date(dateString).toLocaleDateString(undefined, options);
  };

  const formatPhoneNumber = (phoneNumber) => {
    // Format the phone number for display
    if (!phoneNumber) return 'N/A';
    
    // If it starts with 0, format as Sri Lankan number
    if (phoneNumber.startsWith('0')) {
      return phoneNumber;
    }
    
    // If it starts with +94, format as Sri Lankan number
    if (phoneNumber.startsWith('+94')) {
      return `0${phoneNumber.substring(3)}`;
    }
    
    return phoneNumber;
  };

  const generateReport = (type = 'basic') => {
    setReportType(type);
    setShowReport(true);
  };

  const printReport = () => {
    const printContent = document.getElementById('user-report');
    const originalContents = document.body.innerHTML;
    
    document.body.innerHTML = printContent.innerHTML;
    window.print();
    document.body.innerHTML = originalContents;
    
    // Reload the page to restore React functionality
    window.location.reload();
  };

  const exportToPDF = () => {
    // This is a placeholder - in a real app, you would use a library like jsPDF
    alert('PDF export functionality would be implemented here with jsPDF');
  };

  const exportToExcel = () => {
    // This is a placeholder - in a real app, you would use a library like xlsx
    alert('Excel export functionality would be implemented here with xlsx');
  };

  const closeReport = () => {
    setShowReport(false);
  };

  // Basic User Report Component
  const BasicUserReport = () => (
    <div className="report-body" id="user-report">
      <div className="report-info">
        <div>
          <p><strong>Report Date:</strong> {new Date().toLocaleDateString()}</p>
          <p><strong>Total Users:</strong> {users.length}</p>
        </div>
        <div>
          <p><strong>Report Type:</strong> Basic User Report</p>
          <p><strong>Generated By:</strong> Homestock System</p>
        </div>
      </div>
      
      <h3 className="report-section-title">Registered Users</h3>
      
      <table className="report-table">
        <thead>
          <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Joined Date</th>
          </tr>
        </thead>
        <tbody>
          {users.map(user => (
            <tr key={user._id}>
              <td>{user.name}</td>
              <td>{user.email}</td>
              <td>{formatDate(user.createdAt)}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );

  // Detailed User Report Component
  const DetailedUserReport = () => (
    <div className="report-body" id="user-report">
      <div className="report-info">
        <div>
          <p><strong>Report Date:</strong> {new Date().toLocaleDateString()}</p>
          <p><strong>Total Users:</strong> {users.length}</p>
        </div>
        <div>
          <p><strong>Report Type:</strong> Detailed User Report</p>
          <p><strong>Generated By:</strong> Homestock System</p>
        </div>
      </div>
      
      <h3 className="report-section-title">Registered Users - Detailed Information</h3>
      
      <table className="report-table">
        <thead>
          <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Phone Number</th>
            <th>Joined Date</th>
            <th>Status</th>
          </tr>
        </thead>
        <tbody>
          {users.map(user => (
            <tr key={user._id}>
              <td>{user.name}</td>
              <td>{user.email}</td>
              <td>{formatPhoneNumber(user.phoneNumber)}</td>
              <td>{formatDate(user.createdAt)}</td>
              <td>Active</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );

  return (
    <div className="user-management-container">
      <h1 className="page-title">User Management</h1>
      
      {/* Report Generation Buttons */}
      <div className="report-buttons">
        <h3 className="section-title">Generate Reports</h3>
        <div className="report-options">
          <button 
            className="report-option-btn basic" 
            onClick={() => generateReport('basic')}
          >
            <div className="report-option-icon">
              <FaUser />
            </div>
            <div className="report-option-text">
              <h4>Basic User Report</h4>
              <p>Name, Email, Join Date</p>
            </div>
          </button>
          
          <button 
            className="report-option-btn detailed" 
            onClick={() => generateReport('detailed')}
          >
            <div className="report-option-icon">
              <FaChartBar />
            </div>
            <div className="report-option-text">
              <h4>Detailed User Report</h4>
              <p>All User Information</p>
            </div>
          </button>
        </div>
      </div>
      
      {/* Stats Cards */}
      <div className="stats-container">
        <div className="stat-card">
          <div className="stat-icon total-users">
            <FaUser />
          </div>
          <div className="stat-details">
            <h3>{stats.totalUsers}</h3>
            <p>Total Users</p>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon active-users">
            <FaUser />
          </div>
          <div className="stat-details">
            <h3>{stats.activeUsers}</h3>
            <p>Active Users</p>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon new-users">
            <FaUser />
          </div>
          <div className="stat-details">
            <h3>{stats.newUsersThisMonth}</h3>
            <p>New Users This Month</p>
          </div>
        </div>
      </div>
      
      {/* Users Table */}
      {loading ? (
        <div className="loading-spinner">
          <div className="spinner"></div>
          <p>Loading users...</p>
        </div>
      ) : error ? (
        <div className="error-message">{error}</div>
      ) : (
        <div className="table-responsive">
          <table className="users-table">
            <thead>
              <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Phone Number</th>
                <th>Registered On</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {users.map(user => (
                <tr key={user._id}>
                  <td>
                    <div className="user-info">
                      <div className="user-avatar">
                        {user.name.charAt(0).toUpperCase()}
                      </div>
                      <div className="user-name">{user.name}</div>
                    </div>
                  </td>
                  <td>
                    <div className="user-email">
                      <FaEnvelope className="icon" />
                      {user.email}
                    </div>
                  </td>
                  <td>
                    <div className="user-phone">
                      <FaPhone className="icon" />
                      {formatPhoneNumber(user.phoneNumber)}
                    </div>
                  </td>
                  <td>
                    <div className="user-date">
                      <FaCalendarAlt className="icon" />
                      {formatDate(user.createdAt)}
                    </div>
                  </td>
                  <td>
                    <div className="action-buttons">
                      <button className="edit-btn" title="Edit User">
                        <FaEdit />
                      </button>
                      <button className="delete-btn" title="Delete User">
                        <FaTrash />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
      
      {/* User Report Modal */}
      {showReport && (
        <div className="report-modal">
          <div className="report-modal-content" ref={reportRef}>
            <div className="report-header">
              <h2>User Report</h2>
              <div className="report-actions">
                <button className="report-action-btn pdf" onClick={exportToPDF} title="Export to PDF">
                  <FaFilePdf />
                </button>
                <button className="report-action-btn excel" onClick={exportToExcel} title="Export to Excel">
                  <FaFileExcel />
                </button>
                <button className="report-action-btn print" onClick={printReport} title="Print Report">
                  <FaPrint />
                </button>
                <button className="report-close-btn" onClick={closeReport}>×</button>
              </div>
            </div>
            
            {reportType === 'basic' ? <BasicUserReport /> : <DetailedUserReport />}
          </div>
        </div>
      )}
    </div>
  );
};

export default UserManagement;
